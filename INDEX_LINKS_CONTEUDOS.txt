De materiais que preciso catalogar o conteúdo são 56 arquivos-----------------------------

Google Docs
	DataCamp
		Advanced Deep Learning with Keras in Python.docx
		Analyzing Social Media Data in Python.docx
		Analyzing_Police_Activity_with_pandas
			qtos faltantes tem em cada coluna .isnull().sum()
			shape
			remove colunas apaga colunas .drop axis inplace
			remove nulos apaga null dropna(subset=[''])
			tipo de uma coluna dtype
			muda tipo de coluna com astype
			concatena duas colunas separadas por espaço str.cat(r1.campo, sep=' ')
			exibe tipo de cada coluna r1.dtypes
			define indice com set_index
			exibe indice com ri.index
			exibe nome das colunasß
			exibe quantas ocorrencias existem para cada categoria (violações de trânsito) .value_counts()
			exibe a proporção de cada categoria  .value_counts(normalize = True)
			listar ocorrencias de uma categoria filtrando por outra driver_gender == 'F
			agrupa por duas colunas ri.groupby(['driver_gender', 'violation']
			series multi indice .loc['Moving violation', 'bad'])
			cria serie desempilhando print(arrest_rate.unstack())
			filtrando registros que contém string contains('Protective Frisk
			comparando graficos de linhas
			plotando barra

		Aprendizado Ñ Supervisionado.docx
		Case Studies in Statistical Thinking.docx
		Cleaning Data in Python.docx
		CURSOS LINKS DATACAMP.docx
			Designing Machine Learning Workflows in Python.docx
		Ensemble Methods in Python.docx
		Experimental Design in Python.docx
		Extreme Gradient Boosting with XGBoost.docx
		Fraud Detection in Python.docx
		Hyperparameter Tuning in Python.docx
		Importando da WEB.docx
		Importing _ Managing Financial Data in Python.docx
			
		Improving Your Data Visualizations in Python.docx
		Intermediate Python for Data Science.docx
			Intro to Python for Finance.docx
			Machine Learning for Finance in Python.docx
		Machine Learning for Time Series Data in Python.docx
		Machine Learning with Tree-Based Models in Python.docx
			Manipulating DataFrames with pandas.docx
					ler o csv e já determinar qual a index_col
					ordenacao por indice
					indexacao posicional
					indexando e rearranjando
					fatiando linhas e colunas
					sub selecionando dataframes com listas
					limitando dados
					filtra dataframe usando listas com nomes das linhas e das colunas que quer filtrar
					filtrando colunas usando outras colunas
					filtrando usando NaN
					filtrando colunas que tem menos de 1000 ocorrencias diferentes de NaN (menos de 1000 preenchidos), ou seja, dados dispersos
					usando apply para transformar coluna
					usando map com um diconario
					funcoes vetorizadas
					indexando valores e nomes
					mudando indice de um dataframe
					construindo o indice e depois o dataframe
					extraindo dados com multiindex
					definindo e ordenando indice
					usando loc com indices nao indices
					indexando multiplos níveis de multiindice
					pivotando dataframes (roollup girar )
					pivotando indice
					pivotando uma variável
					pivotando todas as variáveis
					empilhando e desempilhando dataframe
					restaurando ordem do indice
					adicionando nomes para legibilidade
					melt - é como um unpivot gira ao contrário - se nãoo conseguir com pivot tente com melt
					pivot tables
					categoricos e groupby
					groupby e agregação
					detectando outliers com z-scores
					preenchendo dados faltantes
					outras transformações com apply
					agrupando e filtrando com apply
					agrupando e filtrando com map
					ranqueamento com value_counts
					dados suspeitos
					ranqueamento
					contando
					reshaping reformatando
					visualizando plot
					plot com ordenação
			Merging DataFrames with pandas.docx
				Lendo DataFrames de arquivos múltiplos lendo vários arquivos 
				Lendo DataFrames de arquivos múltiplos lendo vários arquivos em loop
				Combining DataFrames from multiple data files
				Sorting DataFrame with the Index & columns
				Reindexing DataFrame from a list
				Reindexing using another DataFrame Index
				Adding unaligned DataFrames
				Broadcasting in arithmetic formulas
				Computing percentage growth of GDP
				Converting currency of stocks
				Appending Series with nonunique Indices
				Appending pandas Series	
1				Concatenating pandas Series along row axis
				Appending DataFrames with ignore_index
				Concatenating pandas DataFrames along column axis
				Reading multiple files to build a DataFrame
				Concatenating vertically to get MultiIndexed rows
				Slicing MultiIndexed DataFrames
				Concatenating horizontally to get MultiIndexed columns
				Concatenating DataFrames from a dict
				Concatenating DataFrames with inner join
				Resampling & concatenating DataFrames with inner join	
				Merging company DataFrames
				Merging on a specific column
				Merging on columns with non-matching labels
				Merging on multiple columns
				Joining by Index
				Choosing a joining strategy
				Left & right merging on multiple columns
				Merging DataFrames with outer join
				Using merge_ordered()
				Using merge_asof()
				Loading Olympic edition DataFrame
				Loading IOC codes DataFrame
				Building medals DataFrame
				Counting medals by country/edition in a pivot table
				Computing fraction of medals per Olympic edition
				Computing percentage change in fraction of medals won
				Building hosts DataFrame
				Reshaping for analysis
				Merging to compute influence
				Plotting influence of host country

				

			Model Validation in Python.docx
		Object-Oriented Programming in Python.docx
			Pandas.docx
			Preparing for Coding Interview Questions in Python.docx
			Preparing for Machine Learning Interview Questions in Python.docx
			Preparing for Statistics Interview Questions in Python.docx
		Preprocessing for Machine Learning in Python.docx
		Python Data Science Toolbox.docx
		Python for DataScience.docx
		Regular-Expressions-in-Python-master
			tamanho de um texto
			montar frase usando trechos de outras frases colar palavras
			inverter palavras
			comparar palavras
			converter para minúsculas
			separando palavras de um texto 
			pegar a primeira palavra de um texto e tirar última letra
			remover tag html de um texto
			tirando vírgulas de um texto
			juntando as palavras, sem as vírgulas, em um novo texto
			separando as linhas de um texto (split nas quebras de linha)
			procura duas palavras repetidas (ou três) e substitui por uma
			localiza posição de palavra no texto
			procura a posição da palavra actor em cada uma das três frases que compõem o texto
			substituindo palavras em textos
			substituir trechos da frase por palavras de dicionário)
			formatações de data hora
			inserindo valores de variáveis em uma frase
			removendo trecho de frase - tiramos o https de uma url
			contando quantidade de palavras em uma lista
			achando padrões com regex Regular Expressions for Pattern Matching
			achar palavra com regex
			achar números
			algarismos que formam números, um a um
			regex para achar endereços http e usuários tweeter @ 



		Sentiment Analysis in Python.docx
		Statistical Thinking in Python (Part 2).docx
		Statistical Thinking in Python part 1.docx
		Streamlined Data Ingestion with pandas.docx
			importar dados, ler dados de arquivos de vários tipos
			ler arquivo tsv
			ler dados agrupados
			ler planilhas e worksheets
			append dataframes
			merge dataframes
		Supervised Learning with scikit-learn.docx
		Supply Chain Analytics in Python.docx
		Visualizing Geospatial Data in Python.docx
		Web Scraping in Python.docx
		Winning a Kaggle Competition in Python.docx
			é o caso dos taxis de NY
		Writing Efficient Python Code.docx
	Fast.AI
		2 parte DeepLearning.docx
		Copy of participantes_BDL_marco2018.xlsx
		DeepLearningBrasilia.docx
		Machine Learning - Fastai.docx
		ML FAST AI - gravacoes.xlsx
		ML Gravações Random_Forest_FastAi.xlsx
		Palestra Erik.docx
	Kaggle
		Kaggle 3 abordagens.docx
		Machine Learning - Curso Kaggle.docx
		Palestra Kaggle Careers.docx
		Prevendo autor de frases - Bag of words - naive bayes.docx
		Python para Kaggle.docx
		Python.docx
Trilhas kaggle.docx
	UDACITY
		Intro to Machine Learning.docx
		Udacity Pytorch.docx
		Height and hand length of Udacians - Lesson 1.xlsx
		Udacity Estatística.docx
		Udacity- Data Science.xlsx
	Udemy
		BootCamp José Portilla.docx
		Data Science Career Guide - Interview.xlsx
		Datascience.docx
		Deep Learning.docx
		Estatística.docx
		Finance  Jose Portilla.docx
		Formação Cientista de Dados Fernando Amaral.xlsx
		Machine Learning A a Z.docx
		Machine Learning Resumo.xlsx
		Pipeline - deploying.of.machine.learning.models.docx
		SSIS.docx
Collaboratory colab
	mariofilho
		live 12 series temporais com prophet  - https://colab.research.google.com/drive/1ymsT-iUCrlpo9gpAAItuHLh9HVvC9Rx8#scrollTo=VohAMru6dF78
			como funciona o prophet https://facebook.github.io/prophet/
			prophet não precisa de períodos igualmente espaçados
			importa csv convertendo datas com parse_dates
			sazonalidade prophet usa fourier, tem que pesquisar pra entendre
			graficos com plotly
			prophet não funciona com hollidays, se der erro fazer pip install hollidays 0.9.12
			arima seria outro metodo pra isto, mas prophet é hibrido de serie temporal e machine learning
			parse_dates no read_csv já importa a data convertendo
			contagem para descobrir quantos registros por localidade -value_counts
			filtrar dados selecionando uma localidade data[data['coluna']]=='sao
			prophet náo precisa de séries igualmente espaçada
			contar quantos registros possuem valor zero groupby("date")[zero].sum()
			pegar dataset com dados anteriores a determinada data
			roda modelo com zeros para depois rodar novamente com dados mais limpos
			prophet so pede coluna de data e da medida que vamos prever
			prophet exige nomes de coluna ds e y
			divide treino e teste com sendo treino um só dia e teste o dia seguinte 
			verifica shape de treino e teste
			cria uma função mape para calcular erro médio percentual absoluto
			parametros do prophet qtos periodos quero prever (24 indicando 24 hs), frequencia (funciona melhor c dados diários) history (prever também os dados que usei para treinar)
			para prever usamos metodo predict(future)
			prophet dá um intervalo onde o valor vai estar (max e min) e ˆy(y com chapeu) que é valor medio
			criou função run_prophet que pega parâmetros para rodar prophet - facilita fazer simulação
			função date_range cria pontos de datas - 39 min da live
			outras funçÕes que ele usa são lightgbm e random RandomForest
			testa novamente com dois dias anteriores e verifica o erro (43 min video)
			usando uma semana antes pra treinar e prever um dia foi um resultado bem melhor
			o ideal é pegar uma semana, prever um dia e anotar um erro, depois pegar andar um dia, pegar uma semana e anotar o erro e ir fazendo assim
			o menor erro q conseguiu foi para 7 dias
			outros métodos bons são arima e smooth
			importa cross_validation do prophet que é um pouco diferente da outra
			parametro initial - quantos dias usarei para treinar
			period - quantos dias vou pular para fazer próxima previsáo
			horizon - qtos dias eu vou prever
			validação de bloco com janela deslizante (slide window) é uma técnica para verificar se o modelo funciona ao longo do temporais
			finalmente pegamos semana anterior para prever próxima semana
			testou ensemble de 10% da baseline e 90% do prophet e bateu o resultado








		live14 deploy (no jupyterlab/notebooks) forked no meu github e https://www.youtube.com/watch?v=1hdZ0AVbQcw&t=3857s
			nesta live temos o nb1.ipynb e o app.py
			nb1.ipynb cria, treina e salva o modelo pickle
				construir modelo que lê um texto e identifica se é clickbait
				read_scv com parse_date 
				cortar o dataset depois de uma data
				remover pontuação dos textos
				criar lista de palavras com score pela frequencia que aparecem
				criar nova coluna com valor 1 em um dataframe (e 0 em outro)
				pd.concat
				plotar o dataset para ver se a distribuição está ok
				funções de string str.lower substitui por minúscula
				funções de string str.replace remove pontuação
				TfidfVectorizer - transforma as palavras em vetores, transforma palavras em números de acordo com a freqeuncia que aparecem na mesma linhas
				sklearn.Pipeline import make_pipeline - pega uma lista de transformadores e modelos e executa na ordem certinha 
				media de ytrain - media dos scores para servir de baseline
				log_loss - mede a calibragem do modelo, o AUC ranqueia (coloca os exemplos mais positivos primeiro, depois os negativos), 
					mas a log_loss diz a frequencia que acontece na vida real ( se evento tem 30% de chance de acontecer e 
					eu repetir 10 vezes na vida real, em 3 vezes ele  vai acontecer)
					log_loss quanto menor melhor, o nosso deu 0,2377
				se eu tivesse um ponto de corte, p ex só me interessa acima de 0,,7, não faria sentido retreinar em todos os dados
				make_pipeline - recebe transformadores e modelos e cria um pipeline (passamos o fit pro TfdfiVectorizer e para o RandomForestClassifier)
					- este cara recebe parametro min_df=1 (se a palavra aparece em um exemplo ela estará na bag of words)
				Quantas ocorrencias da palavra faz ela elegível para entrar na bag of words  min_df=1
				ngram_range - outro parâmetro da vetorizer, diz o número de palavras que serão tomadas juntas- 
					pegamos palavras em conjunto para pegar contexto e frases
				predict_proba - diz probabilidade de uma palavra pertencer a um grupo ou a outro
				cria bag of words - o make pipeline faz isto, a bag é uma tabela com a estrutura: Documento, Palavra, frequencia
				dump (depejar) modelo treinado no arquivo pickle
				named_steps lista todos os passos que seu pipeline rodou
				listar todos os itens do vocabulary - também dá para fazer no named_steps
				cria o pickle com biblioteca joblib
				salva o picke com dump - colocamos nome do arquivo com .z no fim, assim ele comprime
				chama a api flask que está em app.py usando requests
				lê um json com o resultado e cria dicionário
				avaliar o resultado, é a chance percentual de algo ser clickbait, então se retorna
					0,6 é porque é clickbait
					0,006 é matéria séria
			 app.py - cria o flask que consome o modelo
				criar um flask bem básico
				como ler um argumento get usando request
				predict_proba como passar um argumento pro flask e fazer ele executar um modelo pickle e dar um score
				json.dumps - como salvar um resultado em um dicionário
				consumir o joblib
				importar um json
				instalar flask no terminal - pip install flask
				importar flask com terminal - python -c "import flask"
				ativar o conda no terminal -  conda activate
				rodar com gunicorn no terminal gunicorn nomescript:nomeobjeto - gunicorn app:app






			consumir pickle
			ativar ambiente conda para o Python

no VSCODE 
	Python3
		Conteúdo do curso
		Seção 1: Introdução - Preparando meu
		ambiente de desenvolvimento
		1. Linux (Ubuntu): Criando meu ambiente de
		desenvolvimento
		2. Windows: Criando meu ambiente de
		desenvolvimento
		3. Entenda como o curso está estruturado
		4. Dicas sobre o pycharm e o curso
		5. Windows - Não quero/posso usar o Pycharm
		6. Linux/Mac - Não quero/posso usar o Pycharm
		7. Perguntas e Respostas - Como funciona?
		8. Regras para perguntas e respostas
		Seção 2: Python Básico (Lógica de
		programação)
		9. Sobre lógica
		10. Discord para alunos
		11. Avisos e dicas do curso
		12. Comentários de código em Python
		Teste 1: Perguntas
		13. O comando print
		Teste 2: Perguntas
		14. Strings (texto) e aspas em Python
		15. Tipos de dados "primitivos"
		16. Operadores Aritméticos
		17. Precedência dos Operadores Aritméticos
		18. Variáveis
		19. Solução do exercício com variáveis
		Teste 3: Perguntas
		20. Introdução à formatação de Strings
			f strings - é aquele (f'{nome} tem {idade:.2f} o .2f arredonda pra duas casas decimais')
		21. Desafio prático (teste seu conhecimento até
		aqui)
		22. Desafio prático - Solução
		23. Input: Entrada de dados do usuário
		Teste 5: Perguntas
		24. IF, ELIF e ELSE + Booleans
		25. Operadores relacionais + IF/ELIF/ELSE
		Teste 6: Perguntas
		26. Operadores lógicos + IF/ELIF/ELSE
		Teste 7: Perguntas
		27. len - Quantidade de caracteres
		28. Documentação e funções built-in úteis
		29. Pass e Ellipsis como placeholders
		30. Exercícios propostos
		31. Exercícios propostos - Solução
		32. Formatando valores em Python
		33. Índices e fatiamento de strings em Python
		34. While - estrutura de repetição em Python
		35. While/Else - Repetição com acumuladores
		em Python
		36. Iterando strings com while em Python
		37. For in - Estrutura de repetição em Python
		38. Listas em Python
		39. Tira dúvidas: for, listas, condições e
		concatenações
		40. FOR / ELSE em Python
		41. Split, Join e Enumerate em Python
		42. Enumerate - Tira dúvidas
		43. Desempacotamento de listas em Python
		44. Trocando o valor entre variáveis em Python
		45. Operação ternária em Python
		46. Expressão condicional com operador OR
		47. Desafio de contadores
		48. Desafio de contadores - SOLUÇÃO
		49. Desafio - Valide um CPF
		50. Desafio - Valide um CPF - SOLUÇÃO
		51. Gerando CPFs com Python
		Seção 3: Python Intermediário
		(Programação Procedural)
		52. Funções (def) em Python - Parte 1
		53. Funções (def) em Python - Parte 2
		54. Exercícios propostos
		55. Exercícios propostos - Solução
		56. Funções (def) em Python - Parte 3
		57. Funções (def) em Python - Parte 4
		58. Exercícios propostos
		59. Exercícios propostos - Solução
		60. Expressões lambda (funções anônimas) em
		Python
			sorted(list, key=lambda)
		61. Tuplas em Python
		62. Dicionários em Python
		63. Sistema de perguntas e respostas com
		dicionários em Python
		64. Sets em Python (Conjuntos)
		65. Exercício
		66. List Comprehension em Python
		67. Exercícios propostos
		68. Exercícios propostos - Solução
		69. Dictionary Comprehension em Python -
		(Compreensão de dicionários)
		70. Geradores, Iteradores e Iteráveis em Python
		71. Comportamento de geradores e iteradores
		72. Exercício proposto
		73. Exercícios propostos - Solução
		74. Zip e Zip_longest - Unindo iteráveis
		75. Exercícios - somando duas listas
		76. Exercício solucionado - somando listas
		77. Count - Contadores infinitos
		78. Combinations, Permutations e Product -
		Itertools
		79. Groupby - Agrupando valores
		80. Map
		81. Filter
		82. Reduce
		83. Try, Except - Tratando Exceções em Python
		84. Levantando exceções em Python (raise)
		85. Uso de try e except como condicional
		86. Módulos padrão do Python
		87. Como criar módulos em Python
		88. Como criar pacotes e módulos em Python
		89. Criando, lendo, escrevendo e apagando
		arquivos
		90. Caminhos de módulos e pacotes (ponto de
		vista)
		91. Funções decoradoras e decoradores
		92. Problema dos parâmetros mutáveis em
		funções
		93. Exercício - Undo e Redo
		94. Desafio - Valide um CNPJ
		95. Desafio - Valide um CNPJ - SOLUÇÃO
		96. Gerando CNPJs com a solução do desafio
		Seção 4: Python - Introdução à
		Programação Orientada a Objetos - POO …Seção 4: Python - Introdução à Programação Orientada a Objetos - POO (Classes)
		97. Introdução
		98. Classes - Python Orientado a Objetos
		99. Curiosidades sobre convenções de nomes
		100. Métodos de classes - Python Orientado a
		Objetos
		101. Métodos estáticos - Python Orientado a
		Objetos
		102. @property - Getters e Setters - Python
		Orientado a Objetos
			Métodos de instância
			métodos de classe
			métodos estáticos
			como funcionar rand randint
			como pegar ano atual com datetime.now())
		103. Atributos de Classe - Python Orientado a
		Objetos
		104. Encapsulamento - Python Orientado a
		Objetos
		105. [Reforço] - Getters e Setters - Parte 1
		106. [Reforço] - Getters e Setters - Parte 2
		107. Associação - Python Orientado a Objetos
		108. Agregação - Python Orientado a Objetos
		109. Composição - Python Orientado a Objetos
		110. Herança Simples - Python Orientado a
		Objetos
		111. Sobreposição de membros - Python
		Orientado a Objetos
		112. Herança múltipla - Python Orientado a
		Objetos
		113. Classes Abstratas - Python Orientado a
		Objetos
		114. Polimorfismo de sobreposição - Python
		Orientado a Objetos
		115. Criando Exceções - Python Orientado a
		Objetos
		116. Sobrecarga de operadores - Python
		Orientado a Objetos
		117. Métodos mágicos - Python Orientado a
		Objetos
		118. Context Manager - Criando e Usando
		gerenciadores de contexto
		119. Herança Simples (Tira dúvidas)
		120. Metaclasses
		121. DocStrings - Documentação
		122. Desafio POO
		123. Desafio POO - Solução
		124. PROPOSTA DE PROJETO - CALCULANDO
		REDES IPV4
		125. (SOLUÇÃO) PROPOSTA DE PROJETO -
		CALCULANDO REDES IPV4
		126. Dataclasses
		127. Enum
		128. Implementando um iterator
		Seção 5: Módulos Python - os, datetime,
		sys, json, csv, selenium, pillow e mais
		129. if __name__ == "__main__"
		130. Datetime - Trabalhando com data e hora em
		Python
		131. Datetime #2 - Datas em português
		132. Último dia do mês em ano bissexto
		133. OS - Percorrendo arquivos e pastas
		134. OS + SHUTIL - Mover, copiar e apagar
		arquivos
		135. OS, SYS, FNMATCH - Convertendo vídeos
		com Python + FFMPEG
		136. JSON - JavaScript Object Notation
		137. CSV - Comma Separated Values
		138. Random - números aleatórios e mais
		139. String - Template
		140. Enviando e-mails com Python
		141. ZIP - Compactando / Descompactando
		arquivos
		142. Sys.argv - Executando arquivos com
		argumentos no sistema
		143. Web Scraping com Python
		144. Selenium - Automatizando tarefas no
		navegador
		145. Subprocess - Executando programas e
		comandos externos
		146. Jupyter Notebook
		147. Threads - Executando processamentos em
		paralelo
		148. PyPDF2 - Unindo e dividindo arquivos PDF
		149. Deque - Trabalhando com LIFO e FIFO
		150. Openpyxl - Planilhas do Excel em Python
		151. Pillow: redimensionando várias imagens
		automaticamente
		Seção 6: PyQT5 - Interface gráfica no
		Python - GUI para Desktop
		152. Instalação e primeiro contato com PyQT5
		153. Criando uma calculadora com PyQT5
		154. Download QT Designer para Windows
		155. Instalando QT Designer no Windows
		156. Instalando QT Designer no Linux
		157. Integrando janelas do QT Designer com
		PyQT5
		158. Adicionando PyQT5 em código Python
		antigo
		Seção 7: Bases de dados com Python -
		SQLite, MySQL e MariaDB
		159. SQLite: usando o módulo sqlite3
		160. DB Browser for SQLite - Windows
		161. DB Browser for SQLite - Linux
		162. Python sqlite3 + DB Browser for SQLite
		163. Windows - Xampp + MySQL Workbench
		164. Linux - MariaDB Server + MySQL
		Workbench
		165. CRUD com Pymysql no MySQL e Mariadb
		Server
		Seção 8: Django no Python - Básico
		166. Django: Olá mundo!
		167. Atualização 07/2021 e avisos
		168. Usando um template HTML em comum
		169. Página inicial
		170. Arquivos estáticos (CSS, JS, IMG...)
		171. Carregando URLs dinamicamente
		172. Incluindo arquivos parciais
		Seção 9: Django no Python - Projeto
		Agenda

		173. Projeto Agenda: Arquivos
		7m

		174. Projeto Agenda: Criando o projeto
		16m

		175. Projeto Agenda: Criando os Models
		17m

		176. Projeto Agenda: Admin
		20m

		177. Projeto Agenda: Exibindo valores nas views
		12m

		178. Projeto Agenda: Exibindo um único contato
		13m

		179. Levantando erros 404
		9m

		180. Usando condicionais
		10m

		181. Paginação
		10m

		182. Ordenando e filtrando valores
		10m

		183. Campo de pesquisa
		26m

		184. Instalando o pillow
		1m
		Seção 14: Testes e introdução ao TDD no
		Python - unittest
		246. Criando o projeto no Vscode
		247. Github da seção
		248. Asserções (Assertions)
		249. Doctests
		250. Unittest #1
		251. Unittest #2 - Com TDD
		252. Unittest #3 - Com TDD
		253. Unittest #4 - Executando e organizando
		todos os testes
		254. Type hints e MyPy
		Seção 15: Design Patterns (Padrões de
		projeto - GOF) - POO Avançado
		255. Introdução
		256. Padrões de Projeto (Design Patterns) - Parte
		257. Padrões de Projeto (Design Patterns) - Parte
		258. Padrões de Projeto (Design Patterns) - Parte
		259. Princípios SOLID
		260. Repositório da seção
		261. Os Livros e avisos
		262. Os diagramas UML
		263. Simple Factory (Criação)
		264. Factory Method (Criação)
		265. Abstract Factory (Criação)
		266. Singleton #1 (Criação)
		267. Singleton #2 (Criação)
		268. Singleton #3 (Criação)
		269. Monostate - Borg (Criação)
		270. Builder (Criação)
		271. Prototype (Criação)
		272. Strategy (Comportamental)
		273. Observer (Comportamental)
		274. Command (Comportamental)
		275. Template Method (Comportamental)
		276. State (Comportamental)
		277. Chain of responsibility (Comportamental)
		278. Iterator (Comportamental)
		279. Mediator (Comportamental)
		280. Visitor e Interpreter (Comportamental)
		281. Memento (Comportamental)
		282. Adapter (Estrutural)
		283. Façade (Estrutural)
		284. Proxy (Estrutural)
		285. Bridge (Estrutural)
		286. Flyweight (Estrutural)
		287. Composite - Teoria (Estrutural)
		288. Composite - Código (Estrutural)
		289. Decorator - Teoria (Estrutural)
		290. Decorator - Código (Estrutural)
		Seção 16: Expressões regulares com Python
		- Regex - Módulo re (Bônus gratuito)
			regex email, ip, todas as palavras de um texto, letras repetidas, caracteres especiais
		291. Conteúdo gratuito
		292. Introdução
		293. Github da seção
		294. Metacaracteres
		295. Quantificadores
		296. Greedy e non-greedy (lazy)
		297. Grupos e Retrovisores
		298. Começa com, Termina com e negação
		299. Shorthands e Flags importantes
		300. Lookahead e Lookbehind
		301. Validando IPv4
		303. Validando Telefones
		304. Validando senhas fortes com Positive
		Lookahead
		305. Validando números
		306. Validando E-mails
		Seção 17: Bases de dados Relacionais com
		Python - SQL usando MySQL
		307. Introdução
		308. Diagramas entidade relacionamento (DER)
		309. Entidades (Tabelas)
		310. Relacionamentos de entidades
		311. Relacionamento de um para um
		(One-to-one)
		312. Relacionamento de um para muitos
		(one-to-many)
		313. Relacionamento de muitos para muitos
		(many-to-many)
		314. Outras maneiras de identificar
		relacionamentos
		315. Instale o Docker e o Docker Compose
		316. Subindo o MySQL via Docker Compose
		317. Instalando o DBeaver
		318. Mais sobre SQL
		319. Criando a tabela users
		320. Criando a tabela roles
		321. Criando a tabela users_roles
		322. Criando a tabela profiles
		323. Colunas com tipo datetime (created_at e
		updated_at)
		324. Entendendo o DBeaver
		325. Repositório para as consultas
		326. SQL INSERT
		327. SELECT de colunas e apelidos (alias)
		415. Emmet Abbreviation - Dicas de
		produtividade no VSCode
		Seção 20: #EXTRA - Comandos Linux/Unix
		mais usados - Aprenda a navegar no term…Seção 20: #EXTRA - Comandos Linux/Unix mais usados - Aprenda a navegar no terminal (BÔNUS)
		417. Introdução e o comando sudo (substitute
		user do)
		418. Arquivo de referência
		419. Comandos pwd, ls e mais
		420. Navegação, caminhos absolutos e relativos,
		pwd, ls, cd e outros comandos Unix
		421. Manipulando diretórios e arquivos com cp,
		mv, mkdir, rm, touch, nano e mais
		422. Operadores e símbolos úteis para executar
		comandos múltiplos no Linux/Unix
		423. Background e Foreground com jobs, fg, bg
		e kill
		424. Outros comandos úteis, como nano, file,
		history, pkill, whoami, hostname e uname
		Seção 21: Notas finais
Jupyter Notebook \\wsl.localhost\Ubuntu\home\gutao\dev\jupyter\notebooks\
	mario filho
		\\wsl.localhost\Ubuntu\home\gutao\dev\jupyter\notebooks\mariofilho\TutorialTitanic
			aula1
			aula2
				value_counts() quantidade de cada categoria em uma variável
				.map(transform) roda uma def em uma coluna do dataset
				pd.series(p, index=teste[... pegamos uma série p e criamos um dataframe com ela alinhado pela chave de um dataframe existente
				cria uma lista com nomes de features
				cria X com features de um dataframe, pegando só aquelas que estão na lista acima
				cria Y pegando feature específica de um dataframe
	toolbox
		brincando \\wsl.localhost\Ubuntu\home\gutao\dev\jupyter\notebooks\toolbox\0_brincando.ipynb
			como remover várias vírgulas e pontos de uma sequencia numérica e preservar somente o primeiro ponto (coordenadas lat long geográficas)
	zumbis python para zumbis Análise de Dados Públicos
		\\wsl.localhost\Ubuntu\home\gutao\dev\jupyter\notebooks\zumbis\AnaliseDadosPublicos
		twitter-tweets-acesso.ipynb
			como fazer login na api twitter
			query na api do twitter
			organizar os dados
			montar tabela com frequencia que cada palavra aparece nos tweets
			fazer dataframe com tabela de frequencia de palavras nos tweets
			renomear colunas dataframe
			formatar percentuais no dataframe
			fazer coluna com valores cumulativos somatório valores
			ordenar dataframe pelo índice ou por outra coluna
			(video 18)
				API como ler a documentação da API da Câmara dos Deputados
			(video 20)	
				API dados abertos educacao dadosabertosbr.com/api 

	
